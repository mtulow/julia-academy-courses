#===============================================================================
| FUNCTIONS
| Topics:
| 1. How to declare a function
| 2. Duck-typing in Julia
| 3. Mutating vs. non-mutating functions
| 4. Some higher order functions
===============================================================================#

bar = "Hello world!"
A = [i + 3*j for j in 0:2, i in 1:3]
f = x -> x^2
v = [3, 2, 5]

#===============================================================================
| HOW TO DECLARE FUNCTIONS
===============================================================================#
println("\nHOW TO DECLARE FUNCTIONS\n")
#===============================================================================
| 1. function and end
===============================================================================#
function foo(bar)
	return "$bar"
end

@show foo(bar)
#===============================================================================
| 2. single line
===============================================================================#
foo(bar) = "$bar"

@show foo(bar)
#===============================================================================
| 3. Anonymous Functions
===============================================================================#
foo -> bar => "$bar"

@show foo(bar)
#==============================================================================#


#===============================================================================
| DUCK TYPING IN JULIA
|
| Julia functions will just work on whatever inputs make sense.
|
===============================================================================#
println("\nDUCK TYPING IN JULIA\n")

sayhi = name -> "Hi $name, it's great to see you!"

@show sayhi("C-3PO")
#==============================================================================#

#===============================================================================
| MUTATING V. NON-MUTATING FUNCTIONS
|
| By convention,
| functions followed by ! alter their contents
| functions lacking ! do not.
|
===============================================================================#
println("\nMUTATING V. NON-MUTATING FUNCTIONS\n")
function non_mutating_sort(arg)
	println(" Non-Mutating")
	println("before: $arg")
	@show sort(arg)
	println("after: $arg")
end

function mutating_sort(arg)
	println("\n Mutating")
	println("before: $arg")
	@show sort!(arg)
	println("after: $arg")
end

non_mutating_sort(v);
mutating_sort(v);
#==============================================================================#

#===============================================================================
| SOME HIGHER ORDER FUNCTIONS
===============================================================================#
println("\nSOME HIGHER ORDER FUNCTIONS\n")
#===============================================================================
| map
===============================================================================#
println(" Map")
square = x -> f(x)
cube = x -> x*f(x)
@show map(square, [1, 2, 3])
@show map(cube, [1, 2, 3])
#===============================================================================
| broadcast
===============================================================================#
println("\n Broadcast")
@show broadcast(f, [1, 2, 3])
@show f.([1, 2, 3])
@show fA = f(A)
@show f_A = f.(A)
@show A .+ 2 .* f.(A) ./ A
#==============================================================================#


#===============================================================================
| EXERCISES
===============================================================================#
println("\nEXERCISES\n")
#===============================================================================
| write a function add_one that adds 1 to its input
===============================================================================#
add_one = x -> 1+x

@show add_one(1)
@show add_one(11)

@assert add_one(1) == 2
@assert add_one(11) == 12
#===============================================================================
| use map or broadcast to increment every element
| of matrix A by 1 and assign it to a variable A1.
===============================================================================#
A1 = broadcast(a -> a+1, A)

print("\nA ∈ "); display(A)
print("A1 ∈ "); display(A1)

@assert A1 == [2 3 4; 5 6 7; 8 9 10]
#===============================================================================
| use broadcast dot syntax to increment every element
| of matrix A by 1 and assign it to a variable A1.
===============================================================================#
A2 = A1 .+ 1
print("A2 ∈ "); display(A2)

@assert A2 == [3 4 5; 6 7 8; 9 10 11]
#==============================================================================#

